% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/holdout.R
\name{holdout_n}
\alias{holdout_n}
\alias{holdout_frac}
\alias{crossv_mc}
\alias{holdout_idx}
\title{Generate test/train splits}
\usage{
holdout_n(n, times = 1L, size = 1L, shuffle = TRUE, prob = NULL)

holdout_frac(n, times = 1L, frac = 0.3, shuffle = TRUE, prob = NULL)

crossv_mc(n, times = 25, frac = 0.3, prob = NULL)

holdout_idx(n, train = NULL, test = NULL)
}
\arguments{
\item{n}{A positive, scalar integer representing the number
of observations (items to choose from).}

\item{times}{A positive, scalar integer representing the number of
bootstrap samples to draw.}

\item{size}{A scalar integer representing the number of elements in the
test set.}

\item{shuffle}{A logical scalar indicating whether to shuffle the
items prior to splitting into test/train sets. This should be used
whenever \code{times > 1}.}

\item{prob}{A numeric vector with observation-specific probabilities that
an observation is the test set. If \code{NULL}, all observations have equal
probabilities.}

\item{frac}{A numeric scalar between 0 and 1 representing the proportion of
items in the test set.}

\item{test, train}{A list of integer vectors, each containing the indexes
in the test (train) splits. If test (train) \code{NULL}, then the index values
will be set to the complement of the train (test) indexes.}
}
\description{
Functions to generate test/train splits. The function \code{holdout_n()}
generates splits such that \code{size} observations are in the test
set and \code{n - size} is in the training set. The function \code{holdout_frac()}
splits the data such that \code{frac} proportion of elements are in the test set
and \code{1 - frac} proportion are in the training set.
}
\details{
Either \code{holdout_frac()} and \code{holdout_n()}, when combined with
\code{shuffle = TRUE} and \code{times > 1} can be used to generate test/train splits
using Monte Carlo cross-validation.
The function \code{crossv_mc()} is a convenience function for Monte Carlo
cross-validation.

The function \code{holdout_idx()} generates test/train splits from manually
specified indexes.
}
\examples{
# Test/train splits using the number of observations
holdout_n(10, times = 5, size = 2)

# Test/train splits without shuffling
holdout_n(10, times = 1, size = 2, shuffle = FALSE)

# Test/train splits using the fraction of observation
holdout_frac(10, frac = 0.3, times = 3)

# Monte-Carlo cross-validation
crossv_mc(10, frac = 0.3, times = 3)

# Manual test/train splits
holdout_idx(10, test = list(1:2, 2:3, 4:5))
}
